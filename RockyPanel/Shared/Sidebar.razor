@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject LocalStorage Storage

<div class="simplebar-track horizontal" style="visibility: hidden;"><div class="simplebar-scrollbar"></div></div><div class="simplebar-scroll-content" style="padding-right: 17px; margin-bottom: -34px;">
    <div class="simplebar-content" style="padding-bottom: 17px; margin-right: -17px;">
        <div class="brand-logo">
            <a href="/">
                <img src="/assets/theme/@(Constants.Theme)/images/logo-icon.png" class="logo-icon" alt="logo icon">
                <h5 class="logo-text">@Constants.PanelName</h5>
            </a>
        </div>
        <ul class="sidebar-menu do-nicescrol in">
            <li class="sidebar-header">Server</li>
            <li>
                <a href="/dashboard" class="active">
                    <i class="fas fa-tachometer-alt"></i> <span>@LangProvider.Get("dashboard")</span>
                </a>
            </li>

            <li>
                <a href="/servers">
                    <i class="fas fa-server"></i> <span>@LangProvider.Get("server.your")</span>
                </a>
            </li>

            <li>
                <a href="forms.html">
                    <i class="zmdi zmdi-format-list-bulleted"></i> <span>Forms</span>
                </a>
            </li>

            <li>
                <a href="tables.html">
                    <i class="zmdi zmdi-grid"></i> <span>Tables</span>
                </a>
            </li>

            <li>
                <a href="calendar.html">
                    <i class="zmdi zmdi-calendar-check"></i> <span>Calendar</span>
                    <small class="badge float-right badge-light">New</small>
                </a>
            </li>

            <li>
                <a href="profile.html">
                    <i class="zmdi zmdi-face"></i> <span>Profile</span>
                </a>
            </li>

            <li>
                <a href="login.html" target="_blank">
                    <i class="zmdi zmdi-lock"></i> <span>Login</span>
                </a>
            </li>

            <li>
                <a href="register.html" target="_blank">
                    <i class="zmdi zmdi-account-circle"></i> <span>Registration</span>
                </a>
            </li>

            <li class="sidebar-header">Admin</li>

            <li>
                <a href="/admin">
                    <i class="fas fa-tachometer-alt"></i> <span>@LangProvider.Get("dashboard")</span>
                </a>
            </li>

            <li>
                <a href="/admin/server">
                    <i class="fas fa-cogs"></i> <span>@LangProvider.Get("admin.settings")</span>
                </a>
            </li>
            <IsAuth>
                @if (storage != null)
                {
                    UserModel user = storage.Get<UserModel>("user");
                    <div class="media">
                        <div class="avatar"><i class="fas fa-user align-self-start mr-3"></i></div>
                        <div class="media-body">
                            <h6 class="mt-2 user-title">@(user.Name_First) @(user.Name_Last)</h6>
                            <p class="user-subtitle">@(user.Email)</p>
                        </div>
                    </div>
                }
            </IsAuth>
        </ul>
    </div>
</div>

@code
{
    private KeyValueStorage storage = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Task.Run(async () =>
        {
            if (storage == null)
            {
                string token = await Storage.GetItemAsync("rocky_token");

                if (token == null)
                {
                    token = SessionStorageProvider.GenerateKey();
                    await Storage.SetItemAsync("rocky_token", token);
                }

                if (!SessionStorageProvider.TokenValid(token))
                {
                    token = SessionStorageProvider.GenerateKey();
                    await Storage.SetItemAsync("rocky_token", token);
                }

                storage = SessionStorageProvider.GetOrCreate(token);

                InvokeAsync(() => { StateHasChanged(); });
            }
        });
    }
}